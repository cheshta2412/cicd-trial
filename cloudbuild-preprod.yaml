steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest', 'preprod/']

  # Step 2: Push the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']

  # Step 3: Get GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud container clusters get-credentials cluster-preprod --zone us-central1-c --project apt-cycling-433408-v4

  # Step 4: Deploy the updated image to GKE
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'preprod/deployment-preprod.yaml']

  # Step 5: Apply the Kubernetes service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'preprod/service-preprod.yaml']

options:
  logging: CLOUD_LOGGING_ONLY

# steps:
#   # Build the Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['build', '-t', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest', 'preprod/']  # Specify the correct directory
  
#   # Push the Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']
  
#   # Deploy to GKE
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/deployment-preprod.yaml']

#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/service-preprod.yaml']

# options:
#   logging: CLOUD_LOGGING_ONLY


# steps:
#   # Step 1: Build the Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['build', '-t', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest', '.']
#     dir: 'preprod'  # Ensure the working directory is set to your 'preprod' folder

#   # Step 2: Push the Docker image to Artifact Registry
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']

#   # Step 3: Deploy the updated image to GKE
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['set', 'image', 'deployment/hello-world-app-preprod', 'hello-world-app-preprod=us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']
#     env:
#       - 'CLOUDSDK_COMPUTE_ZONE=us-central1-c'
#       - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-preprod'
  
#   # Step 4: Apply the Kubernetes deployment
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/deployment-preprod.yaml']

#   # Step 5: Apply the Kubernetes service
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/service-preprod.yaml']

# timeout: '1200s'  # Adjust the timeout if needed
# options:
#   logging: CLOUD_LOGGING_ONLY



# steps:
#   # Step 1: Build the Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['build', '-t', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest', '.']
#     dir: 'preprod'  # Ensure the working directory is set to your 'preprod' folder

#   # Step 2: Push the Docker image to Artifact Registry
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']

#   # Step 3: Deploy the updated image to GKE
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['set', 'image', 'deployment/hello-world-app-preprod', 'hello-world-app-preprod=us-central1-docker.pkg.dev/apt-cycling-433408-v4/repo-trial/hello-world-app:preprod-latest']
#     env:
#       - 'CLOUDSDK_COMPUTE_ZONE=us-central1-c'
#       - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-preprod'
  
#   # Step 4: Apply the Kubernetes deployment
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/deployment-preprod.yaml']

#   # Step 5: Apply the Kubernetes service
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args: ['apply', '-f', 'preprod/service-preprod.yaml']

# timeout: '1200s'  # Adjust the timeout if needed
# options:
#   logging: CLOUD_LOGGING_ONLY

# steps:
#   # Step 1: Install dependencies
#   - name: 'python:3.8-slim'
#     entrypoint: 'pip'
#     args: ['install', '-r', 'requirements.txt']

#   # Step 2: Run tests (if you have any)
#   # - name: 'python:3.8-slim'
#   #   entrypoint: 'pytest'
#   #   args: ['tests/']

#   # Step 3: Build Docker image
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['build', '-t', 'us-central1-docker.pkg.dev/my-project-433308/repo-trial/hello-world-app:preprod-latest', '-f', 'preprod/Dockerfile.preprod', '.']

#   # Step 4: Push Docker image to Google Container Registry
#   - name: 'gcr.io/cloud-builders/docker'
#     args: ['push', 'us-central1-docker.pkg.dev/my-project-433308/repo-trial/hello-world-app:preprod-latest']

#   # Step 5: Deploy to GKE
#   - name: 'gcr.io/cloud-builders/kubectl'
#     args:
#       - 'apply'
#       - '-f'
#       - 'preprod/deployment-preprod.yaml'
#     env:
#       - 'CLOUDSDK_COMPUTE_ZONE=us-central1'
#       - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-preprod'

# options:
#   logging: CLOUD_LOGGING_ONLY

# steps:
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['build', '-t', 'us-central1-docker.pkg.dev/my-project-433308/repo-trial/hello-world-app:preprod-latest', '-f', 'preprod/Dockerfile.preprod', '.']
# - name: 'gcr.io/cloud-builders/docker'
#   args: ['push', 'us-central1-docker.pkg.dev/my-project-433308/repo-trial/hello-world-app:preprod-latest']
# images:
# - 'us-central1-docker.pkg.dev/my-project-433308/repo-trial/hello-world-app:preprod-latest'

# options:
#   logging: CLOUD_LOGGING_ONLY
